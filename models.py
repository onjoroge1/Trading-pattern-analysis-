from datetime import datetime
from app import db

class Stock(db.Model):
    """Stock model to store information about stocks being traded"""
    id = db.Column(db.Integer, primary_key=True)
    symbol = db.Column(db.String(10), unique=True, nullable=False)
    name = db.Column(db.String(100))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    active = db.Column(db.Boolean, default=True)
    
    def __repr__(self):
        return f"<Stock {self.symbol}>"

class PatternDetection(db.Model):
    """Model to store detected reversal patterns"""
    id = db.Column(db.Integer, primary_key=True)
    stock_id = db.Column(db.Integer, db.ForeignKey('stock.id'), nullable=False)
    timestamp = db.Column(db.DateTime, nullable=False)
    pattern_type = db.Column(db.String(50), nullable=False)  # e.g., 'doji', 'hammer', 'consecutive_bullish'
    description = db.Column(db.Text)
    rsi_value = db.Column(db.Float)
    above_orb_high = db.Column(db.Boolean)
    below_orb_low = db.Column(db.Boolean)
    in_opening_hour = db.Column(db.Boolean)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Define relationship with Stock
    stock = db.relationship('Stock', backref=db.backref('patterns', lazy=True))
    
    def __repr__(self):
        return f"<PatternDetection {self.pattern_type} at {self.timestamp}>"

class TradingSignal(db.Model):
    """Model to store trading signals generated by the AI agent"""
    id = db.Column(db.Integer, primary_key=True)
    pattern_id = db.Column(db.Integer, db.ForeignKey('pattern_detection.id'), nullable=False)
    stock_id = db.Column(db.Integer, db.ForeignKey('stock.id'), nullable=False)
    timestamp = db.Column(db.DateTime, nullable=False)
    signal_type = db.Column(db.String(20), nullable=False)  # 'buy', 'sell', 'short', 'hold', 'none'
    confidence = db.Column(db.Float)  # AI confidence score
    notes = db.Column(db.Text)
    price_at_signal = db.Column(db.Float)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Define relationships
    pattern = db.relationship('PatternDetection', backref=db.backref('signals', lazy=True))
    stock = db.relationship('Stock', backref=db.backref('signals', lazy=True))
    
    def __repr__(self):
        return f"<TradingSignal {self.signal_type} for {self.stock.symbol} at {self.timestamp}>"

class TradeExecution(db.Model):
    """Model to store trade executions based on signals"""
    id = db.Column(db.Integer, primary_key=True)
    signal_id = db.Column(db.Integer, db.ForeignKey('trading_signal.id'), nullable=False)
    stock_id = db.Column(db.Integer, db.ForeignKey('stock.id'), nullable=False)
    timestamp = db.Column(db.DateTime, nullable=False)
    action = db.Column(db.String(20), nullable=False)  # 'buy', 'sell', 'short', 'cover'
    quantity = db.Column(db.Integer, nullable=False)
    price = db.Column(db.Float, nullable=False)
    pnl = db.Column(db.Float)  # Profit/Loss for this trade
    status = db.Column(db.String(20), default='open')  # 'open', 'closed'
    closed_timestamp = db.Column(db.DateTime)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Define relationships
    signal = db.relationship('TradingSignal', backref=db.backref('executions', lazy=True))
    stock = db.relationship('Stock', backref=db.backref('trades', lazy=True))
    
    def __repr__(self):
        return f"<TradeExecution {self.action} {self.quantity} {self.stock.symbol} at {self.price}>"

class RLModelTraining(db.Model):
    """Model to store RL model training information"""
    id = db.Column(db.Integer, primary_key=True)
    model_name = db.Column(db.String(100), nullable=False)
    start_date = db.Column(db.DateTime, nullable=False)
    end_date = db.Column(db.DateTime, nullable=False)
    stocks_used = db.Column(db.Text, nullable=False)  # Comma-separated stock symbols
    total_episodes = db.Column(db.Integer, nullable=False)
    total_timesteps = db.Column(db.Integer, nullable=False)
    final_reward = db.Column(db.Float)
    model_path = db.Column(db.String(255))
    timeframe = db.Column(db.String(20), default='5min')  # Store the timeframe used for training
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    def __repr__(self):
        return f"<RLModelTraining {self.model_name} at {self.created_at}>"
